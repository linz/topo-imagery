on:
  workflow_run:
    workflows: ["Format and Tests"]
    branches: ["master"]
    types:
      - completed

name: release-please
jobs:
  release-please:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
    steps:
      - uses: google-github-actions/release-please-action@v3
        id: release
        with:
          release-type: python
          token: ${{ secrets.GITHUB_TOKEN }}
          pull-request-title-pattern: "release: ${version}"

  publish-release:
    needs: release-please
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      packages: write
    env:
      AWS_CI_ROLE: ${{ secrets.AWS_CI_ROLE }}
    if: ${{ needs.release-please.outputs.release_created }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup GIT version
        id: version
        run: |
          GIT_VERSION=$(git describe --tags --always --match 'v*')
          GIT_VERSION_MAJOR=$(echo "$GIT_VERSION" | cut -d. -f1)
          GIT_VERSION_MAJOR_MINOR=$(echo "$GIT_VERSION" | cut -d. -f1,2)
          { echo "version=${GIT_VERSION}"; echo "version_major=${GIT_VERSION_MAJOR}"; echo "version_major_minor=${GIT_VERSION_MAJOR_MINOR}"; } >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ github.repository }}
          labels: |
            org.opencontainers.image.version=${{ steps.version.outputs.version }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        if: ${{env.AWS_CI_ROLE != ''}}
        with:
          aws-region: ap-southeast-2
          mask-aws-account-id: true
          role-to-assume: ${{ secrets.AWS_CI_ROLE }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        if: ${{env.AWS_CI_ROLE != ''}}

      - name: Setup docker tags
        id: tags
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const tags = [];
            tags.push('ghcr.io/${{ github.repository }}:latest');
            tags.push('ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version_major }}');
            tags.push('ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version_major_minor }}');
            tags.push('ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}');
            if ("${{ steps.login-ecr.outputs.registry }}") {
            tags.push('${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:latest');
            tags.push('${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:${{ steps.version.outputs.version_major }}');
            tags.push('${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:${{ steps.version.outputs.version_major_minor }}');
            tags.push('${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:${{ steps.version.outputs.version }}');
            }
            return tags.join(', ')

      - name: Build and push container
        uses: docker/build-push-action@v4
        with:
          context: .
          tags: ${{ steps.tags.outputs.result }}
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            GIT_HASH=${{ github.sha }}
            GIT_VERSION=${{ steps.version.outputs.version }} 
            GITHUB_RUN_ID=${{ github.run_id}}
